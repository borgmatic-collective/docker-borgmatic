#!/command/with-contenv bash

# Load the environment variables from the secrets service
if [ -f /etc/s6-overlay/env/cron-env ]; then
  source /etc/s6-overlay/env/cron-env
fi

# Version variables
borgver=$(borg --version)
borgmaticver=$(borgmatic --version)
apprisever=$(apprise --version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
pythonver=$(python3 --version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')

if [ "${DOCKERCLI}" == "true" ]; then
  dockerver=$(docker --version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
  composever=$(docker compose version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
else
  dockerver="not installed"
  composever="not installed"
fi

# Software versions
echo "-----------------------------------"
echo "Software Versions:
-----------------------------------
apprise $apprisever
$borgver
borgmatic $borgmaticver
dockercli $dockerver
composecli $composever
python $pythonver
-----------------------------------
Time Zone: $TZ
-----------------------------------"
if [ -v EXTRA_PKGS ]
then
  echo "Additional packages installed:"
  echo "-----------------------------------"
  echo $EXTRA_PKGS | tr -s " " "\n"
  echo "-----------------------------------"
fi


DEFAULT_BACKUP_CRON="0 1 * * *"
DEFAULT_CRON_COMMAND="/usr/local/bin/borgmatic --stats -v 0 2>&1"
CRONTAB_FILE="/etc/borgmatic.d/crontab.txt"

# Case 1: BACKUP_CRON is explicitly set to "false" → disable cron
if [[ "$BACKUP_CRON" = "false" ]]; then
    echo "# Cron disabled" > /etc/crontabs/root
    echo "Cron is disabled"

# Case 2: BACKUP_CRON is set and non-empty → use custom schedule
elif [[ -n "$BACKUP_CRON" ]]; then
    CRON_COMMAND="${CRON_COMMAND:-$DEFAULT_CRON_COMMAND}"
    echo "$BACKUP_CRON $CRON_COMMAND" > /etc/crontabs/root
    echo "Applying custom cron"

# Case 3: BACKUP_CRON is unset or empty, and crontab.txt exists → use crontab file
elif [[ -f "$CRONTAB_FILE" ]]; then
    echo "Applying file crontab.txt"
    crontab "$CRONTAB_FILE"

# Case 4: BACKUP_CRON is unset or empty, and crontab.txt doesn't exist → use defaults
else
    echo "$DEFAULT_BACKUP_CRON $DEFAULT_CRON_COMMAND" > /etc/crontabs/root
    echo "Applying default cron"
fi

# Apply extra cron if it's set
if [ -v EXTRA_CRON ]
then
    echo "$EXTRA_CRON" >> /etc/crontabs/root
fi

# Current crontab var
crontab=$(crontab -l)

# Output cron settings to console
echo -e "Cron job set as: \n$crontab\n"

# Start Cron
exec /usr/sbin/crond -f -L /dev/stdout
